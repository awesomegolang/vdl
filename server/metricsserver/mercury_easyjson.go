// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package metricsserver

import (
	json "encoding/json"
	"strconv"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD3216029DecodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver(in *jlexer.Lexer, out *MercuryMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int(in.Int())
		case "counterType":
			out.CounterType = string(in.String())
		case "endpointType":
			out.EndpointType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3216029EncodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver(out *jwriter.Writer, in MercuryMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"duration\":")
	out.Int(int(in.Duration))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"counterType\":")
	out.String(string(in.CounterType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"endpointType\":")
	out.String(string(in.EndpointType))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MercuryMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3216029EncodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MercuryMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3216029EncodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MercuryMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3216029DecodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MercuryMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3216029DecodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver(l, v)
}
func easyjsonD3216029DecodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver1(in *jlexer.Lexer, out *Mercury) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "namespace":
			out.Namespace = string(in.String())
		case "metricName":
			out.MetricName = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "doubleValue":
			out.DoubleValue = float64(in.Float64())
		case "duration":
			out.Duration = int(in.Int())
		case "counterType":
			out.CounterType = string(in.String())
		case "endpointType":
			out.EndpointType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD3216029EncodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver1(out *jwriter.Writer, in Mercury) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"namespace\":")
	out.String(string(in.Namespace))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"metricName\":")
	out.String(string(in.MetricName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"endpoint\":")
	out.String(string(in.Endpoint))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.Int64(int64(in.Timestamp))
	if !first {
		out.RawByte(',')
	}
	first = false

	out.RawString("\"doubleValue\":")
	out.Buffer.EnsureSpace(20)
	out.Buffer.Buf = strconv.AppendFloat(out.Buffer.Buf, float64(in.DoubleValue), 'f', 0, 64)
	//out.Float64(float64(in.DoubleValue))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"duration\":")
	out.Int(int(in.Duration))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"counterType\":")
	out.String(string(in.CounterType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"endpointType\":")
	out.String(string(in.EndpointType))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mercury) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD3216029EncodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mercury) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD3216029EncodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mercury) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD3216029DecodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mercury) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD3216029DecodeGitlabToolsVipshopComDistributedstorageDsVdlServerMetricsserver1(l, v)
}
