// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package apipb is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	RateListRequest
	RateListResponse
	RateUpdateRequest
	RateUpdateResponse
	SnapshotRequeest
	SnapshotResponse
	DebugSwitchRequest
	DebugSwitchResponse
	DeleteFileRequest
	GetDeletePermissionReq
	GetDeletePermissionResp
	SetDeletePermissionReq
	SetDeletePermissionResp
	DeleteFileResponse
	LogStreamLeaderTransferRequeset
	LogStreamLeaderTransferResponse
	LogStreamStartRequest
	LogStreamStartResponse
	LogStreamStopRequest
	LogStreamStopResponse
	LogStreamDeleteRequest
	LogStreamDeleteResponse
	MemberAddRequest
	MemberAddResponse
	MemberRemoveRequest
	MemberRemoveResponse
	MemberUpdateRequest
	MemberUpdateResponse
	MemberListRequest
	MemberListResponse
	ResponseHeader
	Member
*/
package apipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RateListRequest struct {
}

func (m *RateListRequest) Reset()                    { *m = RateListRequest{} }
func (m *RateListRequest) String() string            { return proto.CompactTextString(m) }
func (*RateListRequest) ProtoMessage()               {}
func (*RateListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RateListResponse struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RateListResponse) Reset()                    { *m = RateListResponse{} }
func (m *RateListResponse) String() string            { return proto.CompactTextString(m) }
func (*RateListResponse) ProtoMessage()               {}
func (*RateListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RateListResponse) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RateUpdateRequest struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RateUpdateRequest) Reset()                    { *m = RateUpdateRequest{} }
func (m *RateUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*RateUpdateRequest) ProtoMessage()               {}
func (*RateUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RateUpdateRequest) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type RateUpdateResponse struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RateUpdateResponse) Reset()                    { *m = RateUpdateResponse{} }
func (m *RateUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*RateUpdateResponse) ProtoMessage()               {}
func (*RateUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RateUpdateResponse) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type SnapshotRequeest struct {
	RaftGroup string `protobuf:"bytes,1,opt,name=raft_group,json=raftGroup" json:"raft_group,omitempty"`
}

func (m *SnapshotRequeest) Reset()                    { *m = SnapshotRequeest{} }
func (m *SnapshotRequeest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotRequeest) ProtoMessage()               {}
func (*SnapshotRequeest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SnapshotRequeest) GetRaftGroup() string {
	if m != nil {
		return m.RaftGroup
	}
	return ""
}

type SnapshotResponse struct {
	ResultStatus string `protobuf:"bytes,1,opt,name=result_status,json=resultStatus" json:"result_status,omitempty"`
	Msg          []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SnapshotResponse) Reset()                    { *m = SnapshotResponse{} }
func (m *SnapshotResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotResponse) ProtoMessage()               {}
func (*SnapshotResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SnapshotResponse) GetResultStatus() string {
	if m != nil {
		return m.ResultStatus
	}
	return ""
}

func (m *SnapshotResponse) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type DebugSwitchRequest struct {
	Switch uint64 `protobuf:"varint,1,opt,name=switch" json:"switch,omitempty"`
}

func (m *DebugSwitchRequest) Reset()                    { *m = DebugSwitchRequest{} }
func (m *DebugSwitchRequest) String() string            { return proto.CompactTextString(m) }
func (*DebugSwitchRequest) ProtoMessage()               {}
func (*DebugSwitchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DebugSwitchRequest) GetSwitch() uint64 {
	if m != nil {
		return m.Switch
	}
	return 0
}

type DebugSwitchResponse struct {
	ResultStatus string `protobuf:"bytes,1,opt,name=result_status,json=resultStatus" json:"result_status,omitempty"`
	ErrorMsg     string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *DebugSwitchResponse) Reset()                    { *m = DebugSwitchResponse{} }
func (m *DebugSwitchResponse) String() string            { return proto.CompactTextString(m) }
func (*DebugSwitchResponse) ProtoMessage()               {}
func (*DebugSwitchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DebugSwitchResponse) GetResultStatus() string {
	if m != nil {
		return m.ResultStatus
	}
	return ""
}

func (m *DebugSwitchResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type DeleteFileRequest struct {
	LogstreamName string   `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
	SegmentFiles  []string `protobuf:"bytes,2,rep,name=segment_files,json=segmentFiles" json:"segment_files,omitempty"`
}

func (m *DeleteFileRequest) Reset()                    { *m = DeleteFileRequest{} }
func (m *DeleteFileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileRequest) ProtoMessage()               {}
func (*DeleteFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteFileRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

func (m *DeleteFileRequest) GetSegmentFiles() []string {
	if m != nil {
		return m.SegmentFiles
	}
	return nil
}

type GetDeletePermissionReq struct {
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
}

func (m *GetDeletePermissionReq) Reset()                    { *m = GetDeletePermissionReq{} }
func (m *GetDeletePermissionReq) String() string            { return proto.CompactTextString(m) }
func (*GetDeletePermissionReq) ProtoMessage()               {}
func (*GetDeletePermissionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetDeletePermissionReq) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

type GetDeletePermissionResp struct {
	ResultStatus string `protobuf:"bytes,1,opt,name=result_status,json=resultStatus" json:"result_status,omitempty"`
}

func (m *GetDeletePermissionResp) Reset()                    { *m = GetDeletePermissionResp{} }
func (m *GetDeletePermissionResp) String() string            { return proto.CompactTextString(m) }
func (*GetDeletePermissionResp) ProtoMessage()               {}
func (*GetDeletePermissionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GetDeletePermissionResp) GetResultStatus() string {
	if m != nil {
		return m.ResultStatus
	}
	return ""
}

type SetDeletePermissionReq struct {
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
	Switch        uint64 `protobuf:"varint,2,opt,name=switch" json:"switch,omitempty"`
}

func (m *SetDeletePermissionReq) Reset()                    { *m = SetDeletePermissionReq{} }
func (m *SetDeletePermissionReq) String() string            { return proto.CompactTextString(m) }
func (*SetDeletePermissionReq) ProtoMessage()               {}
func (*SetDeletePermissionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SetDeletePermissionReq) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

func (m *SetDeletePermissionReq) GetSwitch() uint64 {
	if m != nil {
		return m.Switch
	}
	return 0
}

type SetDeletePermissionResp struct {
	ResultStatus string `protobuf:"bytes,1,opt,name=result_status,json=resultStatus" json:"result_status,omitempty"`
	ErrorMsg     string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *SetDeletePermissionResp) Reset()                    { *m = SetDeletePermissionResp{} }
func (m *SetDeletePermissionResp) String() string            { return proto.CompactTextString(m) }
func (*SetDeletePermissionResp) ProtoMessage()               {}
func (*SetDeletePermissionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SetDeletePermissionResp) GetResultStatus() string {
	if m != nil {
		return m.ResultStatus
	}
	return ""
}

func (m *SetDeletePermissionResp) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type DeleteFileResponse struct {
	ResultStatus string `protobuf:"bytes,1,opt,name=result_status,json=resultStatus" json:"result_status,omitempty"`
	ErrorMsg     string `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *DeleteFileResponse) Reset()                    { *m = DeleteFileResponse{} }
func (m *DeleteFileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteFileResponse) ProtoMessage()               {}
func (*DeleteFileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteFileResponse) GetResultStatus() string {
	if m != nil {
		return m.ResultStatus
	}
	return ""
}

func (m *DeleteFileResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

type LogStreamLeaderTransferRequeset struct {
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
	// which transfer to
	Transferee uint64 `protobuf:"varint,2,opt,name=transferee" json:"transferee,omitempty"`
}

func (m *LogStreamLeaderTransferRequeset) Reset()         { *m = LogStreamLeaderTransferRequeset{} }
func (m *LogStreamLeaderTransferRequeset) String() string { return proto.CompactTextString(m) }
func (*LogStreamLeaderTransferRequeset) ProtoMessage()    {}
func (*LogStreamLeaderTransferRequeset) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14}
}

func (m *LogStreamLeaderTransferRequeset) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

func (m *LogStreamLeaderTransferRequeset) GetTransferee() uint64 {
	if m != nil {
		return m.Transferee
	}
	return 0
}

type LogStreamLeaderTransferResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *LogStreamLeaderTransferResponse) Reset()         { *m = LogStreamLeaderTransferResponse{} }
func (m *LogStreamLeaderTransferResponse) String() string { return proto.CompactTextString(m) }
func (*LogStreamLeaderTransferResponse) ProtoMessage()    {}
func (*LogStreamLeaderTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15}
}

func (m *LogStreamLeaderTransferResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type LogStreamStartRequest struct {
	// which raft group member to start
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
}

func (m *LogStreamStartRequest) Reset()                    { *m = LogStreamStartRequest{} }
func (m *LogStreamStartRequest) String() string            { return proto.CompactTextString(m) }
func (*LogStreamStartRequest) ProtoMessage()               {}
func (*LogStreamStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *LogStreamStartRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

type LogStreamStartResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *LogStreamStartResponse) Reset()                    { *m = LogStreamStartResponse{} }
func (m *LogStreamStartResponse) String() string            { return proto.CompactTextString(m) }
func (*LogStreamStartResponse) ProtoMessage()               {}
func (*LogStreamStartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *LogStreamStartResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type LogStreamStopRequest struct {
	// which raft group member to stop
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
}

func (m *LogStreamStopRequest) Reset()                    { *m = LogStreamStopRequest{} }
func (m *LogStreamStopRequest) String() string            { return proto.CompactTextString(m) }
func (*LogStreamStopRequest) ProtoMessage()               {}
func (*LogStreamStopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *LogStreamStopRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

type LogStreamStopResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *LogStreamStopResponse) Reset()                    { *m = LogStreamStopResponse{} }
func (m *LogStreamStopResponse) String() string            { return proto.CompactTextString(m) }
func (*LogStreamStopResponse) ProtoMessage()               {}
func (*LogStreamStopResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *LogStreamStopResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type LogStreamDeleteRequest struct {
	// which raft group member to delete
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
}

func (m *LogStreamDeleteRequest) Reset()                    { *m = LogStreamDeleteRequest{} }
func (m *LogStreamDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*LogStreamDeleteRequest) ProtoMessage()               {}
func (*LogStreamDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *LogStreamDeleteRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

type LogStreamDeleteResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *LogStreamDeleteResponse) Reset()                    { *m = LogStreamDeleteResponse{} }
func (m *LogStreamDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*LogStreamDeleteResponse) ProtoMessage()               {}
func (*LogStreamDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *LogStreamDeleteResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type MemberAddRequest struct {
	// which raft group member add to
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
	// which server will be add to
	ServerName string `protobuf:"bytes,2,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	// peerURLs is the list of URLs the added member will use to communicate with the cluster.
	PeerURLs []string `protobuf:"bytes,3,rep,name=peerURLs" json:"peerURLs,omitempty"`
}

func (m *MemberAddRequest) Reset()                    { *m = MemberAddRequest{} }
func (m *MemberAddRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberAddRequest) ProtoMessage()               {}
func (*MemberAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *MemberAddRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

func (m *MemberAddRequest) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *MemberAddRequest) GetPeerURLs() []string {
	if m != nil {
		return m.PeerURLs
	}
	return nil
}

type MemberAddResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// member is the member information for the added member.
	Member *Member `protobuf:"bytes,2,opt,name=member" json:"member,omitempty"`
	// members is a list of all members after adding the new member.
	Members []*Member `protobuf:"bytes,3,rep,name=members" json:"members,omitempty"`
}

func (m *MemberAddResponse) Reset()                    { *m = MemberAddResponse{} }
func (m *MemberAddResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberAddResponse) ProtoMessage()               {}
func (*MemberAddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *MemberAddResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MemberAddResponse) GetMember() *Member {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *MemberAddResponse) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type MemberRemoveRequest struct {
	// which raft group member add to
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
	// ID is the member ID of the member to remove.
	ID uint64 `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
}

func (m *MemberRemoveRequest) Reset()                    { *m = MemberRemoveRequest{} }
func (m *MemberRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberRemoveRequest) ProtoMessage()               {}
func (*MemberRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *MemberRemoveRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

func (m *MemberRemoveRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type MemberRemoveResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// members is a list of all members after removing the member.
	Members []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *MemberRemoveResponse) Reset()                    { *m = MemberRemoveResponse{} }
func (m *MemberRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberRemoveResponse) ProtoMessage()               {}
func (*MemberRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MemberRemoveResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MemberRemoveResponse) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type MemberUpdateRequest struct {
	// which raft group member(log stream) add to
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
	// ID is the member ID of the member to update.
	ID uint64 `protobuf:"varint,2,opt,name=ID" json:"ID,omitempty"`
	// peerURLs is the new list of URLs the member will use to communicate with the cluster.
	PeerURLs []string `protobuf:"bytes,3,rep,name=peerURLs" json:"peerURLs,omitempty"`
}

func (m *MemberUpdateRequest) Reset()                    { *m = MemberUpdateRequest{} }
func (m *MemberUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberUpdateRequest) ProtoMessage()               {}
func (*MemberUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *MemberUpdateRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

func (m *MemberUpdateRequest) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MemberUpdateRequest) GetPeerURLs() []string {
	if m != nil {
		return m.PeerURLs
	}
	return nil
}

type MemberUpdateResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// members is a list of all members after updating the member.
	Members []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *MemberUpdateResponse) Reset()                    { *m = MemberUpdateResponse{} }
func (m *MemberUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberUpdateResponse) ProtoMessage()               {}
func (*MemberUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *MemberUpdateResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MemberUpdateResponse) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type MemberListRequest struct {
	// which raft group member add to
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
}

func (m *MemberListRequest) Reset()                    { *m = MemberListRequest{} }
func (m *MemberListRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberListRequest) ProtoMessage()               {}
func (*MemberListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *MemberListRequest) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

type MemberListResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// cluster leader id, 0 if no leader
	Leader uint64 `protobuf:"varint,2,opt,name=leader" json:"leader,omitempty"`
	// members is a list of all members associated with the cluster.
	Members []*Member `protobuf:"bytes,3,rep,name=members" json:"members,omitempty"`
	// list all remove members
	RemovedMembers []uint64 `protobuf:"varint,4,rep,packed,name=removed_members,json=removedMembers" json:"removed_members,omitempty"`
}

func (m *MemberListResponse) Reset()                    { *m = MemberListResponse{} }
func (m *MemberListResponse) String() string            { return proto.CompactTextString(m) }
func (*MemberListResponse) ProtoMessage()               {}
func (*MemberListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *MemberListResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MemberListResponse) GetLeader() uint64 {
	if m != nil {
		return m.Leader
	}
	return 0
}

func (m *MemberListResponse) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *MemberListResponse) GetRemovedMembers() []uint64 {
	if m != nil {
		return m.RemovedMembers
	}
	return nil
}

type ResponseHeader struct {
	// logstream_name which operator for.
	LogstreamName string `protobuf:"bytes,1,opt,name=logstream_name,json=logstreamName" json:"logstream_name,omitempty"`
	// cluster id which log stream in
	ClusterId uint64 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId" json:"cluster_id,omitempty"`
	// server name which send the response
	ServerName string `protobuf:"bytes,3,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ResponseHeader) GetLogstreamName() string {
	if m != nil {
		return m.LogstreamName
	}
	return ""
}

func (m *ResponseHeader) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *ResponseHeader) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

type Member struct {
	// ID is the member ID for this member.
	ID uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	// name is the human-readable name of the member. If the member is not started, the name will be an empty string.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// peerURLs is the list of URLs the member exposes to the cluster for communication.
	PeerURLs []string `protobuf:"bytes,3,rep,name=peerURLs" json:"peerURLs,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Member) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Member) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Member) GetPeerURLs() []string {
	if m != nil {
		return m.PeerURLs
	}
	return nil
}

func init() {
	proto.RegisterType((*RateListRequest)(nil), "apipb.RateListRequest")
	proto.RegisterType((*RateListResponse)(nil), "apipb.RateListResponse")
	proto.RegisterType((*RateUpdateRequest)(nil), "apipb.RateUpdateRequest")
	proto.RegisterType((*RateUpdateResponse)(nil), "apipb.RateUpdateResponse")
	proto.RegisterType((*SnapshotRequeest)(nil), "apipb.SnapshotRequeest")
	proto.RegisterType((*SnapshotResponse)(nil), "apipb.SnapshotResponse")
	proto.RegisterType((*DebugSwitchRequest)(nil), "apipb.DebugSwitchRequest")
	proto.RegisterType((*DebugSwitchResponse)(nil), "apipb.DebugSwitchResponse")
	proto.RegisterType((*DeleteFileRequest)(nil), "apipb.DeleteFileRequest")
	proto.RegisterType((*GetDeletePermissionReq)(nil), "apipb.GetDeletePermissionReq")
	proto.RegisterType((*GetDeletePermissionResp)(nil), "apipb.GetDeletePermissionResp")
	proto.RegisterType((*SetDeletePermissionReq)(nil), "apipb.SetDeletePermissionReq")
	proto.RegisterType((*SetDeletePermissionResp)(nil), "apipb.SetDeletePermissionResp")
	proto.RegisterType((*DeleteFileResponse)(nil), "apipb.DeleteFileResponse")
	proto.RegisterType((*LogStreamLeaderTransferRequeset)(nil), "apipb.LogStreamLeaderTransferRequeset")
	proto.RegisterType((*LogStreamLeaderTransferResponse)(nil), "apipb.LogStreamLeaderTransferResponse")
	proto.RegisterType((*LogStreamStartRequest)(nil), "apipb.LogStreamStartRequest")
	proto.RegisterType((*LogStreamStartResponse)(nil), "apipb.LogStreamStartResponse")
	proto.RegisterType((*LogStreamStopRequest)(nil), "apipb.LogStreamStopRequest")
	proto.RegisterType((*LogStreamStopResponse)(nil), "apipb.LogStreamStopResponse")
	proto.RegisterType((*LogStreamDeleteRequest)(nil), "apipb.LogStreamDeleteRequest")
	proto.RegisterType((*LogStreamDeleteResponse)(nil), "apipb.LogStreamDeleteResponse")
	proto.RegisterType((*MemberAddRequest)(nil), "apipb.MemberAddRequest")
	proto.RegisterType((*MemberAddResponse)(nil), "apipb.MemberAddResponse")
	proto.RegisterType((*MemberRemoveRequest)(nil), "apipb.MemberRemoveRequest")
	proto.RegisterType((*MemberRemoveResponse)(nil), "apipb.MemberRemoveResponse")
	proto.RegisterType((*MemberUpdateRequest)(nil), "apipb.MemberUpdateRequest")
	proto.RegisterType((*MemberUpdateResponse)(nil), "apipb.MemberUpdateResponse")
	proto.RegisterType((*MemberListRequest)(nil), "apipb.MemberListRequest")
	proto.RegisterType((*MemberListResponse)(nil), "apipb.MemberListResponse")
	proto.RegisterType((*ResponseHeader)(nil), "apipb.ResponseHeader")
	proto.RegisterType((*Member)(nil), "apipb.Member")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Membership service

type MembershipClient interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error)
}

type membershipClient struct {
	cc *grpc.ClientConn
}

func NewMembershipClient(cc *grpc.ClientConn) MembershipClient {
	return &membershipClient{cc}
}

func (c *membershipClient) MemberAdd(ctx context.Context, in *MemberAddRequest, opts ...grpc.CallOption) (*MemberAddResponse, error) {
	out := new(MemberAddResponse)
	err := grpc.Invoke(ctx, "/apipb.Membership/MemberAdd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipClient) MemberRemove(ctx context.Context, in *MemberRemoveRequest, opts ...grpc.CallOption) (*MemberRemoveResponse, error) {
	out := new(MemberRemoveResponse)
	err := grpc.Invoke(ctx, "/apipb.Membership/MemberRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipClient) MemberUpdate(ctx context.Context, in *MemberUpdateRequest, opts ...grpc.CallOption) (*MemberUpdateResponse, error) {
	out := new(MemberUpdateResponse)
	err := grpc.Invoke(ctx, "/apipb.Membership/MemberUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipClient) MemberList(ctx context.Context, in *MemberListRequest, opts ...grpc.CallOption) (*MemberListResponse, error) {
	out := new(MemberListResponse)
	err := grpc.Invoke(ctx, "/apipb.Membership/MemberList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Membership service

type MembershipServer interface {
	// MemberAdd adds a member into the cluster.
	MemberAdd(context.Context, *MemberAddRequest) (*MemberAddResponse, error)
	// MemberRemove removes an existing member from the cluster.
	MemberRemove(context.Context, *MemberRemoveRequest) (*MemberRemoveResponse, error)
	// MemberUpdate updates the member configuration.
	MemberUpdate(context.Context, *MemberUpdateRequest) (*MemberUpdateResponse, error)
	// MemberList lists all the members in the cluster.
	MemberList(context.Context, *MemberListRequest) (*MemberListResponse, error)
}

func RegisterMembershipServer(s *grpc.Server, srv MembershipServer) {
	s.RegisterService(&_Membership_serviceDesc, srv)
}

func _Membership_MemberAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).MemberAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Membership/MemberAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).MemberAdd(ctx, req.(*MemberAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Membership_MemberRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).MemberRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Membership/MemberRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).MemberRemove(ctx, req.(*MemberRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Membership_MemberUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).MemberUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Membership/MemberUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).MemberUpdate(ctx, req.(*MemberUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Membership_MemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).MemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.Membership/MemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).MemberList(ctx, req.(*MemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Membership_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.Membership",
	HandlerType: (*MembershipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberAdd",
			Handler:    _Membership_MemberAdd_Handler,
		},
		{
			MethodName: "MemberRemove",
			Handler:    _Membership_MemberRemove_Handler,
		},
		{
			MethodName: "MemberUpdate",
			Handler:    _Membership_MemberUpdate_Handler,
		},
		{
			MethodName: "MemberList",
			Handler:    _Membership_MemberList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for LogStreamAdmin service

type LogStreamAdminClient interface {
	// Start a log stream.
	LogStreamStart(ctx context.Context, in *LogStreamStartRequest, opts ...grpc.CallOption) (*LogStreamStartResponse, error)
	// Stop a log stream.
	LogStreamStop(ctx context.Context, in *LogStreamStopRequest, opts ...grpc.CallOption) (*LogStreamStopResponse, error)
	// Delete a log stream.
	LogStreamDelete(ctx context.Context, in *LogStreamDeleteRequest, opts ...grpc.CallOption) (*LogStreamDeleteResponse, error)
	// Delete segment file in log stream.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// get delete segment file permission
	GetDeletePermission(ctx context.Context, in *GetDeletePermissionReq, opts ...grpc.CallOption) (*GetDeletePermissionResp, error)
	// set delete segment file permission
	SetDeletePermission(ctx context.Context, in *SetDeletePermissionReq, opts ...grpc.CallOption) (*SetDeletePermissionResp, error)
	// leade tranfser
	LeaderTransfer(ctx context.Context, in *LogStreamLeaderTransferRequeset, opts ...grpc.CallOption) (*LogStreamLeaderTransferResponse, error)
}

type logStreamAdminClient struct {
	cc *grpc.ClientConn
}

func NewLogStreamAdminClient(cc *grpc.ClientConn) LogStreamAdminClient {
	return &logStreamAdminClient{cc}
}

func (c *logStreamAdminClient) LogStreamStart(ctx context.Context, in *LogStreamStartRequest, opts ...grpc.CallOption) (*LogStreamStartResponse, error) {
	out := new(LogStreamStartResponse)
	err := grpc.Invoke(ctx, "/apipb.LogStreamAdmin/LogStreamStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamAdminClient) LogStreamStop(ctx context.Context, in *LogStreamStopRequest, opts ...grpc.CallOption) (*LogStreamStopResponse, error) {
	out := new(LogStreamStopResponse)
	err := grpc.Invoke(ctx, "/apipb.LogStreamAdmin/LogStreamStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamAdminClient) LogStreamDelete(ctx context.Context, in *LogStreamDeleteRequest, opts ...grpc.CallOption) (*LogStreamDeleteResponse, error) {
	out := new(LogStreamDeleteResponse)
	err := grpc.Invoke(ctx, "/apipb.LogStreamAdmin/LogStreamDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamAdminClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := grpc.Invoke(ctx, "/apipb.LogStreamAdmin/DeleteFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamAdminClient) GetDeletePermission(ctx context.Context, in *GetDeletePermissionReq, opts ...grpc.CallOption) (*GetDeletePermissionResp, error) {
	out := new(GetDeletePermissionResp)
	err := grpc.Invoke(ctx, "/apipb.LogStreamAdmin/GetDeletePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamAdminClient) SetDeletePermission(ctx context.Context, in *SetDeletePermissionReq, opts ...grpc.CallOption) (*SetDeletePermissionResp, error) {
	out := new(SetDeletePermissionResp)
	err := grpc.Invoke(ctx, "/apipb.LogStreamAdmin/SetDeletePermission", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStreamAdminClient) LeaderTransfer(ctx context.Context, in *LogStreamLeaderTransferRequeset, opts ...grpc.CallOption) (*LogStreamLeaderTransferResponse, error) {
	out := new(LogStreamLeaderTransferResponse)
	err := grpc.Invoke(ctx, "/apipb.LogStreamAdmin/LeaderTransfer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogStreamAdmin service

type LogStreamAdminServer interface {
	// Start a log stream.
	LogStreamStart(context.Context, *LogStreamStartRequest) (*LogStreamStartResponse, error)
	// Stop a log stream.
	LogStreamStop(context.Context, *LogStreamStopRequest) (*LogStreamStopResponse, error)
	// Delete a log stream.
	LogStreamDelete(context.Context, *LogStreamDeleteRequest) (*LogStreamDeleteResponse, error)
	// Delete segment file in log stream.
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// get delete segment file permission
	GetDeletePermission(context.Context, *GetDeletePermissionReq) (*GetDeletePermissionResp, error)
	// set delete segment file permission
	SetDeletePermission(context.Context, *SetDeletePermissionReq) (*SetDeletePermissionResp, error)
	// leade tranfser
	LeaderTransfer(context.Context, *LogStreamLeaderTransferRequeset) (*LogStreamLeaderTransferResponse, error)
}

func RegisterLogStreamAdminServer(s *grpc.Server, srv LogStreamAdminServer) {
	s.RegisterService(&_LogStreamAdmin_serviceDesc, srv)
}

func _LogStreamAdmin_LogStreamStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamAdminServer).LogStreamStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.LogStreamAdmin/LogStreamStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamAdminServer).LogStreamStart(ctx, req.(*LogStreamStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamAdmin_LogStreamStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamAdminServer).LogStreamStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.LogStreamAdmin/LogStreamStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamAdminServer).LogStreamStop(ctx, req.(*LogStreamStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamAdmin_LogStreamDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamAdminServer).LogStreamDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.LogStreamAdmin/LogStreamDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamAdminServer).LogStreamDelete(ctx, req.(*LogStreamDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamAdmin_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamAdminServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.LogStreamAdmin/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamAdminServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamAdmin_GetDeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeletePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamAdminServer).GetDeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.LogStreamAdmin/GetDeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamAdminServer).GetDeletePermission(ctx, req.(*GetDeletePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamAdmin_SetDeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeletePermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamAdminServer).SetDeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.LogStreamAdmin/SetDeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamAdminServer).SetDeletePermission(ctx, req.(*SetDeletePermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStreamAdmin_LeaderTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogStreamLeaderTransferRequeset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStreamAdminServer).LeaderTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.LogStreamAdmin/LeaderTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStreamAdminServer).LeaderTransfer(ctx, req.(*LogStreamLeaderTransferRequeset))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogStreamAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.LogStreamAdmin",
	HandlerType: (*LogStreamAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogStreamStart",
			Handler:    _LogStreamAdmin_LogStreamStart_Handler,
		},
		{
			MethodName: "LogStreamStop",
			Handler:    _LogStreamAdmin_LogStreamStop_Handler,
		},
		{
			MethodName: "LogStreamDelete",
			Handler:    _LogStreamAdmin_LogStreamDelete_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _LogStreamAdmin_DeleteFile_Handler,
		},
		{
			MethodName: "GetDeletePermission",
			Handler:    _LogStreamAdmin_GetDeletePermission_Handler,
		},
		{
			MethodName: "SetDeletePermission",
			Handler:    _LogStreamAdmin_SetDeletePermission_Handler,
		},
		{
			MethodName: "LeaderTransfer",
			Handler:    _LogStreamAdmin_LeaderTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for RateAdmin service

type RateAdminClient interface {
	ListRateInfo(ctx context.Context, in *RateListRequest, opts ...grpc.CallOption) (*RateListResponse, error)
	UpdateRateInfo(ctx context.Context, in *RateUpdateRequest, opts ...grpc.CallOption) (*RateUpdateResponse, error)
}

type rateAdminClient struct {
	cc *grpc.ClientConn
}

func NewRateAdminClient(cc *grpc.ClientConn) RateAdminClient {
	return &rateAdminClient{cc}
}

func (c *rateAdminClient) ListRateInfo(ctx context.Context, in *RateListRequest, opts ...grpc.CallOption) (*RateListResponse, error) {
	out := new(RateListResponse)
	err := grpc.Invoke(ctx, "/apipb.RateAdmin/ListRateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateAdminClient) UpdateRateInfo(ctx context.Context, in *RateUpdateRequest, opts ...grpc.CallOption) (*RateUpdateResponse, error) {
	out := new(RateUpdateResponse)
	err := grpc.Invoke(ctx, "/apipb.RateAdmin/UpdateRateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RateAdmin service

type RateAdminServer interface {
	ListRateInfo(context.Context, *RateListRequest) (*RateListResponse, error)
	UpdateRateInfo(context.Context, *RateUpdateRequest) (*RateUpdateResponse, error)
}

func RegisterRateAdminServer(s *grpc.Server, srv RateAdminServer) {
	s.RegisterService(&_RateAdmin_serviceDesc, srv)
}

func _RateAdmin_ListRateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateAdminServer).ListRateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.RateAdmin/ListRateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateAdminServer).ListRateInfo(ctx, req.(*RateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateAdmin_UpdateRateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateAdminServer).UpdateRateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.RateAdmin/UpdateRateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateAdminServer).UpdateRateInfo(ctx, req.(*RateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RateAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.RateAdmin",
	HandlerType: (*RateAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRateInfo",
			Handler:    _RateAdmin_ListRateInfo_Handler,
		},
		{
			MethodName: "UpdateRateInfo",
			Handler:    _RateAdmin_UpdateRateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for SnapshotAdmin service

type SnapshotAdminClient interface {
	CreateSnapshotMeta(ctx context.Context, in *SnapshotRequeest, opts ...grpc.CallOption) (*SnapshotResponse, error)
}

type snapshotAdminClient struct {
	cc *grpc.ClientConn
}

func NewSnapshotAdminClient(cc *grpc.ClientConn) SnapshotAdminClient {
	return &snapshotAdminClient{cc}
}

func (c *snapshotAdminClient) CreateSnapshotMeta(ctx context.Context, in *SnapshotRequeest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := grpc.Invoke(ctx, "/apipb.SnapshotAdmin/CreateSnapshotMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SnapshotAdmin service

type SnapshotAdminServer interface {
	CreateSnapshotMeta(context.Context, *SnapshotRequeest) (*SnapshotResponse, error)
}

func RegisterSnapshotAdminServer(s *grpc.Server, srv SnapshotAdminServer) {
	s.RegisterService(&_SnapshotAdmin_serviceDesc, srv)
}

func _SnapshotAdmin_CreateSnapshotMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequeest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapshotAdminServer).CreateSnapshotMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.SnapshotAdmin/CreateSnapshotMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapshotAdminServer).CreateSnapshotMeta(ctx, req.(*SnapshotRequeest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnapshotAdmin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.SnapshotAdmin",
	HandlerType: (*SnapshotAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSnapshotMeta",
			Handler:    _SnapshotAdmin_CreateSnapshotMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for DevTool service

type DevToolClient interface {
	// Enable or Disable debug
	DebugSwitch(ctx context.Context, in *DebugSwitchRequest, opts ...grpc.CallOption) (*DebugSwitchResponse, error)
}

type devToolClient struct {
	cc *grpc.ClientConn
}

func NewDevToolClient(cc *grpc.ClientConn) DevToolClient {
	return &devToolClient{cc}
}

func (c *devToolClient) DebugSwitch(ctx context.Context, in *DebugSwitchRequest, opts ...grpc.CallOption) (*DebugSwitchResponse, error) {
	out := new(DebugSwitchResponse)
	err := grpc.Invoke(ctx, "/apipb.DevTool/DebugSwitch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DevTool service

type DevToolServer interface {
	// Enable or Disable debug
	DebugSwitch(context.Context, *DebugSwitchRequest) (*DebugSwitchResponse, error)
}

func RegisterDevToolServer(s *grpc.Server, srv DevToolServer) {
	s.RegisterService(&_DevTool_serviceDesc, srv)
}

func _DevTool_DebugSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DevToolServer).DebugSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.DevTool/DebugSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DevToolServer).DebugSwitch(ctx, req.(*DebugSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DevTool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.DevTool",
	HandlerType: (*DevToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DebugSwitch",
			Handler:    _DevTool_DebugSwitch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x72, 0xe3, 0x44,
	0x10, 0x2e, 0xd9, 0xc1, 0x89, 0x3b, 0x89, 0x93, 0x4c, 0xb2, 0x8e, 0xa3, 0xfc, 0xee, 0xe4, 0x67,
	0x43, 0x58, 0xe2, 0x22, 0x14, 0x97, 0x54, 0xb1, 0x5b, 0x0b, 0xa9, 0x4d, 0x52, 0x95, 0x50, 0x5b,
	0xf6, 0x2e, 0x7b, 0xe0, 0x60, 0x94, 0x68, 0x22, 0xab, 0x90, 0x34, 0xda, 0x99, 0xb1, 0xc3, 0x19,
	0x8e, 0x9c, 0x58, 0x9e, 0x83, 0xf7, 0xe0, 0x48, 0x15, 0x07, 0x2e, 0x9c, 0xb6, 0x78, 0x10, 0x4a,
	0xa3, 0x91, 0x2c, 0xc9, 0xb2, 0xb1, 0xbd, 0x70, 0x93, 0xbb, 0x7b, 0xfa, 0xfb, 0x7a, 0xba, 0x7b,
	0x7a, 0xc6, 0x50, 0x66, 0xfe, 0xed, 0xb1, 0xcf, 0xa8, 0xa0, 0xe8, 0x03, 0xc3, 0xb7, 0xfd, 0x1b,
	0x7d, 0xc5, 0xa2, 0x16, 0x95, 0x92, 0x7a, 0xf0, 0x15, 0x2a, 0xf5, 0x0d, 0x8b, 0x52, 0xcb, 0x21,
	0x75, 0xc3, 0xb7, 0xeb, 0x86, 0xe7, 0x51, 0x61, 0x08, 0x9b, 0x7a, 0x3c, 0xd4, 0xe2, 0x25, 0x58,
	0x68, 0x18, 0x82, 0x5c, 0xd9, 0x5c, 0x34, 0xc8, 0x9b, 0x0e, 0xe1, 0x02, 0xef, 0xc1, 0x62, 0x4f,
	0xc4, 0x7d, 0xea, 0x71, 0x82, 0x16, 0xa1, 0xe8, 0x72, 0xab, 0xa6, 0xed, 0x68, 0x87, 0x73, 0x8d,
	0xe0, 0x13, 0xef, 0xc3, 0x52, 0x60, 0xf5, 0xca, 0x37, 0x0d, 0x41, 0xd4, 0xd2, 0x1c, 0xb3, 0x03,
	0x40, 0x49, 0xb3, 0x81, 0xee, 0x3e, 0x81, 0xc5, 0xa6, 0x67, 0xf8, 0xbc, 0x4d, 0x43, 0x1e, 0x81,
	0xb7, 0x4d, 0x00, 0x66, 0xdc, 0x89, 0x96, 0xc5, 0x68, 0xc7, 0x97, 0xc6, 0xe5, 0x46, 0x39, 0x90,
	0x9c, 0x07, 0x02, 0x7c, 0x99, 0x5c, 0xa2, 0x1c, 0xef, 0xc2, 0x3c, 0x23, 0xbc, 0xe3, 0x88, 0x16,
	0x17, 0x86, 0xe8, 0x70, 0xb5, 0x6a, 0x2e, 0x14, 0x36, 0xa5, 0x2c, 0x42, 0x2f, 0xf4, 0xd0, 0x1f,
	0x03, 0x3a, 0x23, 0x37, 0x1d, 0xab, 0x79, 0x6f, 0x8b, 0xdb, 0x76, 0x14, 0x4d, 0x15, 0x4a, 0x5c,
	0x0a, 0xa4, 0x97, 0xa9, 0x86, 0xfa, 0x85, 0x5f, 0xc3, 0x72, 0xca, 0x7a, 0x1c, 0xec, 0x75, 0x28,
	0x13, 0xc6, 0x28, 0x6b, 0x45, 0x0c, 0xca, 0x8d, 0x19, 0x29, 0xb8, 0xe6, 0x16, 0x6e, 0xc1, 0xd2,
	0x19, 0x71, 0x88, 0x20, 0xcf, 0x6d, 0x27, 0xde, 0xd3, 0x7d, 0xa8, 0x38, 0xd4, 0xe2, 0x82, 0x11,
	0xc3, 0x6d, 0x79, 0x86, 0x4b, 0x94, 0xdf, 0xf9, 0x58, 0xfa, 0x95, 0xe1, 0x4a, 0x74, 0x4e, 0x2c,
	0x97, 0x78, 0xa2, 0x75, 0x67, 0x3b, 0x84, 0xd7, 0x0a, 0x3b, 0xc5, 0x00, 0x5d, 0x09, 0x03, 0x8f,
	0x1c, 0x3f, 0x85, 0xea, 0x39, 0x11, 0x21, 0xc6, 0x0b, 0xc2, 0x5c, 0x9b, 0x73, 0x9b, 0x7a, 0x0d,
	0xf2, 0x66, 0x44, 0x14, 0xfc, 0x04, 0x56, 0x73, 0x1d, 0x70, 0x7f, 0xa4, 0xf0, 0xf1, 0x6b, 0xa8,
	0x36, 0xdf, 0x87, 0x40, 0x22, 0x27, 0x85, 0x54, 0x4e, 0xbe, 0x81, 0xd5, 0xe6, 0x7b, 0x10, 0x1b,
	0x9e, 0x97, 0xaf, 0x83, 0xf2, 0xe8, 0xe5, 0xe5, 0x3f, 0xcb, 0x77, 0x1b, 0xb6, 0xaf, 0xa8, 0xd5,
	0x94, 0xd1, 0x5d, 0x11, 0xc3, 0x24, 0xec, 0x25, 0x33, 0x3c, 0x7e, 0x47, 0x58, 0x98, 0x7c, 0x32,
	0x72, 0xf6, 0xb7, 0x00, 0x84, 0x5a, 0x4a, 0x88, 0xda, 0x9a, 0x84, 0x04, 0xbf, 0x18, 0x82, 0xa4,
	0xc2, 0xf9, 0x18, 0x4a, 0x6d, 0xa9, 0x91, 0x08, 0xb3, 0x27, 0x0f, 0x8e, 0xe5, 0xa9, 0x72, 0x1c,
	0x19, 0x5c, 0x48, 0x65, 0x43, 0x19, 0xe1, 0x27, 0xf0, 0x20, 0xf6, 0xd8, 0x14, 0x06, 0x13, 0xe3,
	0xd5, 0x2b, 0x3e, 0x87, 0x6a, 0x76, 0xfd, 0x64, 0x44, 0x3e, 0x87, 0x95, 0x84, 0x23, 0xea, 0x8f,
	0xc9, 0xe3, 0x79, 0x2a, 0x8e, 0x60, 0xf9, 0x64, 0x34, 0x9e, 0x26, 0xe2, 0x09, 0x8b, 0x65, 0x4c,
	0x22, 0x17, 0xb0, 0xda, 0xe7, 0x60, 0x32, 0x2a, 0x5d, 0x58, 0xbc, 0x26, 0xee, 0x0d, 0x61, 0xcf,
	0x4c, 0x73, 0xcc, 0x53, 0x64, 0x1b, 0x66, 0x39, 0x61, 0x5d, 0xc2, 0x42, 0x9b, 0xb0, 0x60, 0x21,
	0x14, 0x49, 0x03, 0x1d, 0x66, 0x7c, 0x42, 0xd8, 0xab, 0xc6, 0x15, 0xaf, 0x15, 0xe5, 0x09, 0x13,
	0xff, 0xc6, 0x6f, 0x35, 0x58, 0x4a, 0x00, 0x4f, 0x44, 0x1e, 0xed, 0x43, 0xc9, 0x95, 0x3e, 0x24,
	0xf8, 0xec, 0xc9, 0xbc, 0x32, 0x0f, 0x1d, 0x37, 0x94, 0x12, 0x3d, 0x82, 0xe9, 0xf0, 0x2b, 0xa4,
	0xd1, 0x67, 0x17, 0x69, 0xf1, 0x15, 0x2c, 0x2b, 0x11, 0x71, 0x69, 0x77, 0xdc, 0x53, 0xb5, 0x02,
	0x85, 0xcb, 0x33, 0xd5, 0x4f, 0x85, 0xcb, 0x33, 0xec, 0xc1, 0x4a, 0xda, 0xdb, 0x64, 0x41, 0x26,
	0xd8, 0x17, 0x86, 0xb2, 0x6f, 0x47, 0xec, 0xd3, 0x73, 0x76, 0x32, 0xf6, 0x43, 0x93, 0x17, 0x47,
	0x96, 0x19, 0xd5, 0xff, 0x57, 0x64, 0xa7, 0x51, 0xad, 0x24, 0xae, 0x1e, 0xa3, 0xb6, 0xca, 0xaf,
	0x1a, 0xa0, 0xe4, 0xe2, 0xc9, 0xa8, 0x56, 0xa1, 0xe4, 0x84, 0xe6, 0x6a, 0x94, 0x38, 0x7d, 0x21,
	0x0c, 0x2d, 0x2d, 0xf4, 0x08, 0x16, 0x98, 0x2c, 0x03, 0xb3, 0x15, 0x2d, 0x98, 0xda, 0x29, 0x1e,
	0x4e, 0x35, 0x2a, 0x4a, 0x7c, 0xad, 0x62, 0xbd, 0x87, 0x4a, 0x9a, 0xc3, 0xa8, 0x09, 0xdc, 0x04,
	0xb8, 0x75, 0x3a, 0x5c, 0x10, 0xd6, 0xb2, 0x4d, 0x45, 0xb3, 0xac, 0x24, 0x97, 0x66, 0xb6, 0x5b,
	0x8b, 0xd9, 0x6e, 0xc5, 0x17, 0x50, 0x0a, 0x39, 0xa8, 0x52, 0xd0, 0xe2, 0x52, 0x40, 0x30, 0x95,
	0xe8, 0x70, 0xf9, 0x3d, 0xac, 0x3c, 0x4e, 0xfe, 0x2a, 0x02, 0xa8, 0x70, 0xda, 0xb6, 0x8f, 0xbe,
	0x83, 0x72, 0xdc, 0xe9, 0x68, 0x35, 0xb5, 0x3f, 0xbd, 0x43, 0x47, 0xaf, 0xf5, 0x2b, 0xc2, 0x5d,
	0xc0, 0x1f, 0xfd, 0xf0, 0xc7, 0xdf, 0xbf, 0x14, 0xf6, 0xf1, 0x4e, 0xbd, 0x6b, 0x3a, 0x21, 0xe1,
	0xba, 0x1b, 0xbb, 0x57, 0x9f, 0x75, 0xc3, 0x34, 0x4f, 0xb5, 0x23, 0x74, 0x0f, 0x73, 0xc9, 0xa6,
	0x43, 0x7a, 0x3a, 0x1f, 0xc9, 0xbe, 0xd6, 0xd7, 0x73, 0x75, 0x0a, 0xf5, 0x58, 0xa2, 0x1e, 0xe2,
	0xdd, 0xa1, 0xa8, 0x61, 0xf2, 0x52, 0xc0, 0x61, 0x4f, 0x64, 0x80, 0x53, 0x2d, 0x99, 0x01, 0x4e,
	0x37, 0xd1, 0x88, 0xc0, 0x1d, 0xb9, 0x28, 0x00, 0xa6, 0xd1, 0x66, 0x07, 0xf5, 0x8d, 0xd2, 0xdb,
	0x98, 0xe8, 0x17, 0x7d, 0x2d, 0x47, 0xa3, 0x20, 0x1f, 0x4b, 0xc8, 0x03, 0xfc, 0x70, 0x28, 0xa4,
	0x63, 0x73, 0x71, 0xaa, 0x1d, 0x9d, 0xbc, 0x9d, 0x86, 0x4a, 0x3c, 0x7d, 0x9e, 0x99, 0xae, 0xed,
	0x21, 0x91, 0x90, 0xc8, 0x01, 0x8d, 0x36, 0x14, 0x5a, 0xee, 0xdc, 0xd7, 0x37, 0x07, 0x68, 0x15,
	0x9f, 0x7d, 0xc9, 0x67, 0x1b, 0xeb, 0x09, 0x3e, 0x71, 0xb1, 0xd7, 0x79, 0x60, 0x1b, 0x44, 0xee,
	0xc3, 0x7c, 0x6a, 0x1c, 0xa3, 0xf5, 0x7e, 0xb7, 0xf1, 0x8c, 0xd7, 0x37, 0xf2, 0x95, 0x0a, 0x72,
	0x4f, 0x42, 0x6e, 0xe1, 0xb5, 0x01, 0x90, 0xd4, 0x0f, 0x10, 0xbf, 0x87, 0x85, 0xcc, 0xdc, 0x45,
	0x7d, 0xa1, 0xa4, 0x06, 0xba, 0xbe, 0x35, 0x48, 0xad, 0x70, 0x0f, 0x24, 0xee, 0x0e, 0x5e, 0xcf,
	0xc5, 0x35, 0xa5, 0x71, 0x80, 0xec, 0x01, 0xf4, 0xae, 0x95, 0x71, 0x96, 0xfb, 0x5e, 0x00, 0x71,
	0x96, 0xfb, 0xef, 0xa0, 0xb9, 0x7d, 0x94, 0x85, 0x92, 0xef, 0x81, 0x00, 0xef, 0x27, 0x0d, 0x96,
	0x73, 0x6e, 0xef, 0x71, 0xb8, 0xf9, 0x4f, 0x83, 0x38, 0xdc, 0x01, 0x17, 0x7f, 0xfc, 0x99, 0xe4,
	0x50, 0xc7, 0x47, 0xb9, 0x1c, 0x2c, 0x22, 0x5a, 0x8a, 0x87, 0x1f, 0xaf, 0x8b, 0xd8, 0x34, 0x87,
	0xb0, 0x69, 0x0e, 0x67, 0xd3, 0x9c, 0x88, 0x0d, 0x1f, 0xc4, 0xe6, 0x67, 0x0d, 0x2a, 0xe9, 0x8b,
	0x31, 0x3a, 0xc8, 0xa6, 0x39, 0xff, 0x8a, 0xae, 0xff, 0xab, 0x9d, 0xca, 0x55, 0x5d, 0x32, 0xfb,
	0x10, 0xef, 0xe5, 0x32, 0x0b, 0x87, 0x4f, 0x2b, 0xb8, 0xb3, 0xdf, 0x71, 0xc2, 0x82, 0xa6, 0xfc,
	0x53, 0x83, 0x72, 0xf0, 0x78, 0x0e, 0xfb, 0xf1, 0x5b, 0x98, 0x93, 0x0d, 0x6e, 0x08, 0x72, 0xe9,
	0xdd, 0x51, 0x54, 0x8d, 0xa6, 0x5b, 0xfa, 0xf9, 0xae, 0xaf, 0xf6, 0xc9, 0x15, 0xfe, 0xb6, 0xc4,
	0x5f, 0xc3, 0x2b, 0x09, 0x7c, 0x66, 0x08, 0x12, 0x1d, 0x02, 0xa8, 0x0d, 0x15, 0x75, 0x6e, 0x45,
	0x18, 0xb5, 0x84, 0xaf, 0xf4, 0x71, 0xb7, 0x96, 0xa3, 0x51, 0x38, 0x0f, 0x25, 0xce, 0x3a, 0xae,
	0x66, 0x71, 0xe2, 0xf3, 0xed, 0xe4, 0x47, 0x0d, 0xe6, 0xa3, 0xb7, 0x7b, 0x18, 0x1d, 0x03, 0xf4,
	0x25, 0x23, 0x86, 0x20, 0x91, 0xf8, 0x9a, 0x08, 0x23, 0x9e, 0x2c, 0xd9, 0xbf, 0x06, 0xf4, 0x7e,
	0x85, 0x02, 0x3f, 0x92, 0xe0, 0x7b, 0x78, 0x3b, 0x01, 0xce, 0x95, 0x51, 0xfd, 0x56, 0x22, 0xb4,
	0x5c, 0x22, 0x8c, 0x80, 0x85, 0x80, 0xe9, 0x33, 0xd2, 0x7d, 0x49, 0xa9, 0x83, 0x6c, 0x98, 0x4d,
	0x3c, 0xe9, 0x51, 0xaf, 0xe3, 0xb2, 0x7f, 0x0a, 0xe8, 0x7a, 0x9e, 0x4a, 0x81, 0xef, 0x4a, 0xf0,
	0x4d, 0x5c, 0x4b, 0x80, 0x9b, 0xa4, 0x2b, 0x28, 0x75, 0xea, 0x66, 0x60, 0x7f, 0xaa, 0x1d, 0x7d,
	0x31, 0xf3, 0xdb, 0xbb, 0x2d, 0xed, 0xf7, 0x77, 0x5b, 0xda, 0x4d, 0x49, 0xfe, 0x05, 0xf3, 0xe9,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x48, 0x38, 0x2e, 0xca, 0x11, 0x00, 0x00,
}
